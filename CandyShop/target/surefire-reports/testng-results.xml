<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="15" passed="15">
  <reporter-output>
  </reporter-output>
  <suite name="Default Suite" duration-ms="30" started-at="2016-04-05T08:29:48Z" finished-at="2016-04-05T08:29:48Z">
    <groups>
      <group name="negative">
        <method signature="OrderTest.whenDeleteNotExistingItemsQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenDeleteNotExistingItemsQuantityThenException" class="com.epam.OrderTest"/>
        <method signature="OrderTest.whenModifyNotExistingThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyNotExistingThenException" class="com.epam.OrderTest"/>
        <method signature="OrderTest.whenModifyToNegativeQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyToNegativeQuantityThenException" class="com.epam.OrderTest"/>
      </group> <!-- negative -->
      <group name="smoke">
        <method signature="CandyTest.whenCreateCandyWithQuantityThenSuccess()[pri:0, instance:com.epam.CandyTest@49e4cb85]" name="whenCreateCandyWithQuantityThenSuccess" class="com.epam.CandyTest"/>
        <method signature="ChocolateTest.whenCreateChocolateWithQualityThenSuccess()[pri:0, instance:com.epam.ChocolateTest@7c30a502]" name="whenCreateChocolateWithQualityThenSuccess" class="com.epam.ChocolateTest"/>
        <method signature="OrderTest.whenDeleteNotExistingItemsQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenDeleteNotExistingItemsQuantityThenException" class="com.epam.OrderTest"/>
        <method signature="OrderTest.whenGetAveragePriceThenSuccess()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenGetAveragePriceThenSuccess" class="com.epam.OrderTest"/>
        <method signature="OrderTest.whenGetTotalPriceThenSuccess()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenGetTotalPriceThenSuccess" class="com.epam.OrderTest"/>
        <method signature="OrderTest.whenModifyNotExistingThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyNotExistingThenException" class="com.epam.OrderTest"/>
        <method signature="OrderTest.whenModifyQuantityThenSuccess(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyQuantityThenSuccess" class="com.epam.OrderTest"/>
        <method signature="OrderTest.whenModifyToNegativeQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyToNegativeQuantityThenException" class="com.epam.OrderTest"/>
      </group> <!-- smoke -->
    </groups>
    <test name="w1" duration-ms="30" started-at="2016-04-05T08:29:48Z" finished-at="2016-04-05T08:29:48Z">
      <class name="com.epam.CandyTest">
        <test-method status="PASS" signature="whenCreateCandyWithQuantityThenSuccess()[pri:0, instance:com.epam.CandyTest@49e4cb85]" name="whenCreateCandyWithQuantityThenSuccess" duration-ms="9" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenCreateCandyWithQuantityThenSuccess -->
      </class> <!-- com.epam.CandyTest -->
      <class name="com.epam.ChocolateTest">
        <test-method status="PASS" signature="whenCreateChocolateWithQualityThenSuccess()[pri:0, instance:com.epam.ChocolateTest@7c30a502]" name="whenCreateChocolateWithQualityThenSuccess" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenCreateChocolateWithQualityThenSuccess -->
      </class> <!-- com.epam.ChocolateTest -->
      <class name="com.epam.OrderTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="1" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="whenDeleteNotExistingItemsQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenDeleteNotExistingItemsQuantityThenException" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="negative" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[No item with that ID exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: No item with that ID exist
	at com.epam.Order.deleteItem(Order.java:37)
	at com.epam.OrderTest.whenDeleteNotExistingItemsQuantityThenException(OrderTest.java:156)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenDeleteNotExistingItemsQuantityThenException -->
        <test-method status="PASS" signature="whenDeleteNotExistingItemsQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenDeleteNotExistingItemsQuantityThenException" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="negative" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[No item with that ID exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: No item with that ID exist
	at com.epam.Order.deleteItem(Order.java:37)
	at com.epam.OrderTest.whenDeleteNotExistingItemsQuantityThenException(OrderTest.java:156)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenDeleteNotExistingItemsQuantityThenException -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="whenGetAveragePriceThenSuccess()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenGetAveragePriceThenSuccess" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenGetAveragePriceThenSuccess -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="whenGetTotalPriceThenSuccess()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenGetTotalPriceThenSuccess" duration-ms="1" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenGetTotalPriceThenSuccess -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="whenModifyNotExistingThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyNotExistingThenException" duration-ms="1" started-at="2016-04-05T10:29:48Z" data-provider="negative" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[No item with that ID exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: No item with that ID exist
	at com.epam.Order.modifyQuantity(Order.java:28)
	at com.epam.OrderTest.whenModifyNotExistingThenException(OrderTest.java:162)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyNotExistingThenException -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="whenModifyNotExistingThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyNotExistingThenException" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="negative" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[No item with that ID exist]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: No item with that ID exist
	at com.epam.Order.modifyQuantity(Order.java:28)
	at com.epam.OrderTest.whenModifyNotExistingThenException(OrderTest.java:162)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyNotExistingThenException -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="whenModifyQuantityThenSuccess(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyQuantityThenSuccess" duration-ms="1" started-at="2016-04-05T10:29:48Z" data-provider="modifyQuantity" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyQuantityThenSuccess -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="1" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="whenModifyQuantityThenSuccess(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyQuantityThenSuccess" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="modifyQuantity" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyQuantityThenSuccess -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="whenModifyQuantityThenSuccess(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyQuantityThenSuccess" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="modifyQuantity" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyQuantityThenSuccess -->
        <test-method status="PASS" signature="whenModifyQuantityThenSuccess(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyQuantityThenSuccess" duration-ms="1" started-at="2016-04-05T10:29:48Z" data-provider="modifyQuantity" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyQuantityThenSuccess -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="whenModifyQuantityThenSuccess(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyQuantityThenSuccess" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="modifyQuantity" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2147483647]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyQuantityThenSuccess -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="whenModifyToNegativeQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyToNegativeQuantityThenException" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="negative" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Quantity should be positive number]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Quantity should be positive number
	at com.epam.Order.modifyQuantity(Order.java:25)
	at com.epam.OrderTest.whenModifyToNegativeQuantityThenException(OrderTest.java:170)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyToNegativeQuantityThenException -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="setUp" is-config="true" duration-ms="0" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="afterMethod" is-config="true" duration-ms="1" started-at="2016-04-05T10:29:48Z" finished-at="2016-04-05T10:29:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="whenModifyToNegativeQuantityThenException(int)[pri:0, instance:com.epam.OrderTest@2f7c7260]" name="whenModifyToNegativeQuantityThenException" duration-ms="0" started-at="2016-04-05T10:29:48Z" data-provider="negative" finished-at="2016-04-05T10:29:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Quantity should be positive number]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Quantity should be positive number
	at com.epam.Order.modifyQuantity(Order.java:25)
	at com.epam.OrderTest.whenModifyToNegativeQuantityThenException(OrderTest.java:170)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenModifyToNegativeQuantityThenException -->
      </class> <!-- com.epam.OrderTest -->
    </test> <!-- w1 -->
  </suite> <!-- Default Suite -->
</testng-results>
